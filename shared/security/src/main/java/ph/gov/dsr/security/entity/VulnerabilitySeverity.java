package ph.gov.dsr.security.entity;

/**
 * Enumeration for vulnerability severity levels based on CVSS
 * 
 * @author DSR Development Team
 * @version 3.0.0
 * @since 2024-12-28
 */
public enum VulnerabilitySeverity {
    
    /**
     * None - CVSS Score 0.0
     */
    NONE("None", 0.0, 0.0, "No impact"),
    
    /**
     * Low - CVSS Score 0.1-3.9
     */
    LOW("Low", 0.1, 3.9, "Low impact to the organization"),
    
    /**
     * Medium - CVSS Score 4.0-6.9
     */
    MEDIUM("Medium", 4.0, 6.9, "Medium impact to the organization"),
    
    /**
     * High - CVSS Score 7.0-8.9
     */
    HIGH("High", 7.0, 8.9, "High impact to the organization"),
    
    /**
     * Critical - CVSS Score 9.0-10.0
     */
    CRITICAL("Critical", 9.0, 10.0, "Critical impact to the organization");
    
    private final String displayName;
    private final double minScore;
    private final double maxScore;
    private final String description;
    
    VulnerabilitySeverity(String displayName, double minScore, double maxScore, String description) {
        this.displayName = displayName;
        this.minScore = minScore;
        this.maxScore = maxScore;
        this.description = description;
    }
    
    public String getDisplayName() {
        return displayName;
    }
    
    public double getMinScore() {
        return minScore;
    }
    
    public double getMaxScore() {
        return maxScore;
    }
    
    public String getDescription() {
        return description;
    }
    
    /**
     * Get severity from CVSS score
     */
    public static VulnerabilitySeverity fromCvssScore(double score) {
        if (score < 0.0 || score > 10.0) {
            throw new IllegalArgumentException("CVSS score must be between 0.0 and 10.0");
        }
        
        if (score == 0.0) return NONE;
        if (score >= 0.1 && score <= 3.9) return LOW;
        if (score >= 4.0 && score <= 6.9) return MEDIUM;
        if (score >= 7.0 && score <= 8.9) return HIGH;
        if (score >= 9.0 && score <= 10.0) return CRITICAL;
        
        return LOW; // Default fallback
    }
    
    /**
     * Get severity from string value (case insensitive)
     */
    public static VulnerabilitySeverity fromString(String value) {
        if (value == null || value.trim().isEmpty()) {
            return LOW;
        }
        
        try {
            return valueOf(value.toUpperCase());
        } catch (IllegalArgumentException e) {
            return LOW; // Default to low if invalid value
        }
    }
    
    /**
     * Check if this severity is higher than another
     */
    public boolean isHigherThan(VulnerabilitySeverity other) {
        return this.ordinal() > other.ordinal();
    }
    
    /**
     * Check if this severity is lower than another
     */
    public boolean isLowerThan(VulnerabilitySeverity other) {
        return this.ordinal() < other.ordinal();
    }
    
    /**
     * Check if this severity requires immediate attention
     */
    public boolean requiresImmediateAttention() {
        return this == HIGH || this == CRITICAL;
    }
    
    /**
     * Check if this severity requires emergency patching
     */
    public boolean requiresEmergencyPatching() {
        return this == CRITICAL;
    }
    
    /**
     * Get recommended SLA for remediation in days
     */
    public int getRemediationSlaInDays() {
        switch (this) {
            case CRITICAL: return 1;    // 1 day
            case HIGH: return 7;        // 1 week
            case MEDIUM: return 30;     // 1 month
            case LOW: return 90;        // 3 months
            case NONE: return 365;      // 1 year
            default: return 30;
        }
    }
}
