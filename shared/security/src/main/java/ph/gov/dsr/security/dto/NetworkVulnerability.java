package ph.gov.dsr.security.dto;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
import ph.gov.dsr.security.entity.VulnerabilitySeverity;

import java.time.LocalDateTime;

/**
 * DTO for network vulnerabilities
 * 
 * @author DSR Development Team
 * @version 3.0.0
 * @since 2024-12-28
 */
@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
public class NetworkVulnerability {

    private String id;
    private String name;
    private String description;
    private VulnerabilitySeverity severity;
    private String host;
    private Integer port;
    private String protocol;
    private String service;
    private String pluginId;
    private String pluginName;
    private String solution;
    private String reference;
    private String cveId;
    private String cvssScore;
    private String cvssVector;
    private Double riskScore;
    private String exploitAvailable;
    private String patchAvailable;
    private String category;
    private String family;
    private Boolean falsePositive;
    private LocalDateTime detectedAt;
    private String output;
    private String synopsis;
    private String seeAlso;
    private String pluginOutput;
    private String riskFactor;
    private String exploitabilityEase;
    private String patchPublicationDate;
    private String vulnerabilityPublicationDate;
    private String tags;
    
    /**
     * Check if this vulnerability is high severity
     */
    public boolean isHighSeverity() {
        return severity == VulnerabilitySeverity.HIGH || severity == VulnerabilitySeverity.CRITICAL;
    }
    
    /**
     * Check if this vulnerability is critical
     */
    public boolean isCritical() {
        return severity == VulnerabilitySeverity.CRITICAL;
    }
    
    /**
     * Check if this vulnerability requires immediate attention
     */
    public boolean requiresImmediateAttention() {
        return isCritical() || (riskScore != null && riskScore >= 8.0);
    }
    
    /**
     * Check if exploit is available
     */
    public boolean hasExploit() {
        return "Yes".equalsIgnoreCase(exploitAvailable);
    }
    
    /**
     * Check if patch is available
     */
    public boolean hasPatch() {
        return "Yes".equalsIgnoreCase(patchAvailable);
    }
}
