package ph.gov.dsr.security.entity;

import jakarta.persistence.*;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotNull;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
import org.springframework.data.annotation.CreatedDate;
import org.springframework.data.annotation.LastModifiedDate;
import org.springframework.data.jpa.domain.support.AuditingEntityListener;

import java.time.LocalDateTime;
import java.util.UUID;

/**
 * VulnerabilityReport entity for tracking security vulnerabilities
 * 
 * @author DSR Development Team
 * @version 3.0.0
 * @since 2024-12-28
 */
@Entity
@Table(name = "vulnerability_reports", schema = "dsr_security")
@EntityListeners(AuditingEntityListener.class)
@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
public class VulnerabilityReport {

    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    @Column(name = "id", columnDefinition = "UUID")
    private UUID id;

    @NotBlank
    @Column(name = "vulnerability_id", unique = true, nullable = false, length = 100)
    private String vulnerabilityId; // CVE-YYYY-NNNN or internal ID

    @NotBlank
    @Column(name = "title", nullable = false, length = 255)
    private String title;

    @Column(name = "description", columnDefinition = "TEXT")
    private String description;

    @NotBlank
    @Column(name = "severity", nullable = false, length = 20)
    private String severity; // LOW, MEDIUM, HIGH, CRITICAL

    @Column(name = "cvss_score")
    private Double cvssScore; // 0.0 to 10.0

    @Column(name = "cvss_vector", length = 255)
    private String cvssVector;

    @Column(name = "cwe_id", length = 20)
    private String cweId; // Common Weakness Enumeration

    @Column(name = "affected_component", length = 255)
    private String affectedComponent;

    @Column(name = "affected_version", length = 100)
    private String affectedVersion;

    @Column(name = "discovery_method", length = 100)
    private String discoveryMethod; // AUTOMATED_SCAN, MANUAL_TESTING, EXTERNAL_REPORT

    @Column(name = "discovered_by", length = 255)
    private String discoveredBy;

    @Column(name = "status", length = 50)
    private String status; // OPEN, IN_PROGRESS, FIXED, VERIFIED, CLOSED

    @Column(name = "priority", length = 20)
    private String priority; // LOW, MEDIUM, HIGH, CRITICAL

    @Column(name = "exploitability", length = 20)
    private String exploitability; // NONE, LOW, MEDIUM, HIGH

    @Column(name = "impact_confidentiality", length = 20)
    private String impactConfidentiality; // NONE, LOW, HIGH

    @Column(name = "impact_integrity", length = 20)
    private String impactIntegrity; // NONE, LOW, HIGH

    @Column(name = "impact_availability", length = 20)
    private String impactAvailability; // NONE, LOW, HIGH

    @Column(name = "attack_vector", length = 50)
    private String attackVector; // NETWORK, ADJACENT, LOCAL, PHYSICAL

    @Column(name = "attack_complexity", length = 20)
    private String attackComplexity; // LOW, HIGH

    @Column(name = "privileges_required", length = 20)
    private String privilegesRequired; // NONE, LOW, HIGH

    @Column(name = "user_interaction", length = 20)
    private String userInteraction; // NONE, REQUIRED

    @Column(name = "scope", length = 20)
    private String scope; // UNCHANGED, CHANGED

    @Column(name = "proof_of_concept", columnDefinition = "TEXT")
    private String proofOfConcept;

    @Column(name = "remediation_guidance", columnDefinition = "TEXT")
    private String remediationGuidance;

    @Column(name = "workaround", columnDefinition = "TEXT")
    private String workaround;

    @Column(name = "references", columnDefinition = "TEXT")
    private String references; // JSON array of reference URLs

    @Column(name = "assigned_to", columnDefinition = "UUID")
    private UUID assignedTo;

    @Column(name = "assigned_team", length = 100)
    private String assignedTeam;

    @Column(name = "estimated_fix_date")
    private LocalDateTime estimatedFixDate;

    @Column(name = "actual_fix_date")
    private LocalDateTime actualFixDate;

    @Column(name = "verification_date")
    private LocalDateTime verificationDate;

    @Column(name = "false_positive", nullable = false)
    @Builder.Default
    private Boolean falsePositive = false;

    @Column(name = "duplicate_of", columnDefinition = "UUID")
    private UUID duplicateOf;

    @Column(name = "compliance_impact", length = 500)
    private String complianceImpact; // JSON array of affected compliance frameworks

    @Column(name = "business_impact", columnDefinition = "TEXT")
    private String businessImpact;

    @Column(name = "technical_details", columnDefinition = "TEXT")
    private String technicalDetails;

    @Column(name = "scan_tool", length = 100)
    private String scanTool; // Tool that discovered the vulnerability

    @Column(name = "scan_date")
    private LocalDateTime scanDate;

    @CreatedDate
    @Column(name = "created_at", nullable = false, updatable = false)
    private LocalDateTime createdAt;

    @LastModifiedDate
    @Column(name = "updated_at")
    private LocalDateTime updatedAt;

    @Column(name = "created_by", columnDefinition = "UUID")
    private UUID createdBy;

    @Column(name = "updated_by", columnDefinition = "UUID")
    private UUID updatedBy;

    /**
     * Pre-persist hook to set default values
     */
    @PrePersist
    protected void onCreate() {
        if (status == null) {
            status = "OPEN";
        }
        if (priority == null) {
            priority = "MEDIUM";
        }
        if (exploitability == null) {
            exploitability = "LOW";
        }
    }
}
