package ph.gov.dsr.security.dto;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
import ph.gov.dsr.security.entity.VulnerabilitySeverity;

import java.time.LocalDateTime;

/**
 * DTO for code vulnerabilities
 * 
 * @author DSR Development Team
 * @version 3.0.0
 * @since 2024-12-28
 */
@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
public class CodeVulnerability {

    private String id;
    private String name;
    private String description;
    private VulnerabilitySeverity severity;
    private String ruleKey;
    private String ruleName;
    private String component;
    private String project;
    private String filePath;
    private Integer line;
    private String message;
    private String status;
    private String resolution;
    private String author;
    private String assignee;
    private String type;
    private String category;
    private String effort;
    private String debt;
    private String tags;
    private Boolean falsePositive;
    private LocalDateTime detectedAt;
    private LocalDateTime creationDate;
    private LocalDateTime updateDate;
    private String hash;
    private String textRange;
    private String flows;
    private String cweId;
    private String owaspCategory;
    private String sansCategory;
    private Double technicalDebt;
    private String remediationEffort;
    private String codeSnippet;
    
    /**
     * Check if this vulnerability is high severity
     */
    public boolean isHighSeverity() {
        return severity == VulnerabilitySeverity.HIGH || severity == VulnerabilitySeverity.CRITICAL;
    }
    
    /**
     * Check if this vulnerability is critical
     */
    public boolean isCritical() {
        return severity == VulnerabilitySeverity.CRITICAL;
    }
    
    /**
     * Check if this vulnerability requires immediate attention
     */
    public boolean requiresImmediateAttention() {
        return isCritical() || "BLOCKER".equalsIgnoreCase(severity.name());
    }
    
    /**
     * Check if this is a security hotspot
     */
    public boolean isSecurityHotspot() {
        return "SECURITY_HOTSPOT".equalsIgnoreCase(type);
    }
    
    /**
     * Check if this vulnerability is resolved
     */
    public boolean isResolved() {
        return "RESOLVED".equalsIgnoreCase(status) || "FIXED".equalsIgnoreCase(resolution);
    }
}
