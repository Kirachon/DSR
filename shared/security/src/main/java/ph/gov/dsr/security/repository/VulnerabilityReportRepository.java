package ph.gov.dsr.security.repository;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;
import ph.gov.dsr.security.entity.VulnerabilityReport;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;
import java.util.UUID;

/**
 * Repository interface for VulnerabilityReport entity
 * 
 * @author DSR Development Team
 * @version 3.0.0
 * @since 2024-12-28
 */
@Repository
public interface VulnerabilityReportRepository extends JpaRepository<VulnerabilityReport, UUID> {

    /**
     * Find vulnerability by vulnerability ID
     */
    Optional<VulnerabilityReport> findByVulnerabilityId(String vulnerabilityId);

    /**
     * Find vulnerabilities by severity
     */
    List<VulnerabilityReport> findBySeverityOrderByCreatedAtDesc(String severity);

    /**
     * Find vulnerabilities by status
     */
    List<VulnerabilityReport> findByStatusOrderByCreatedAtDesc(String status);

    /**
     * Find open vulnerabilities
     */
    @Query("SELECT v FROM VulnerabilityReport v WHERE v.status IN ('OPEN', 'IN_PROGRESS') ORDER BY v.createdAt DESC")
    List<VulnerabilityReport> findOpenVulnerabilities();

    /**
     * Find open vulnerabilities with pagination
     */
    @Query("SELECT v FROM VulnerabilityReport v WHERE v.status IN ('OPEN', 'IN_PROGRESS') ORDER BY v.createdAt DESC")
    Page<VulnerabilityReport> findOpenVulnerabilities(Pageable pageable);

    /**
     * Find critical vulnerabilities
     */
    @Query("SELECT v FROM VulnerabilityReport v WHERE v.severity = 'CRITICAL' ORDER BY v.createdAt DESC")
    List<VulnerabilityReport> findCriticalVulnerabilities();

    /**
     * Find high-severity vulnerabilities
     */
    @Query("SELECT v FROM VulnerabilityReport v WHERE v.severity IN ('HIGH', 'CRITICAL') ORDER BY v.createdAt DESC")
    List<VulnerabilityReport> findHighSeverityVulnerabilities();

    /**
     * Find vulnerabilities by priority
     */
    List<VulnerabilityReport> findByPriorityOrderByCreatedAtDesc(String priority);

    /**
     * Find vulnerabilities by affected component
     */
    List<VulnerabilityReport> findByAffectedComponentOrderByCreatedAtDesc(String affectedComponent);

    /**
     * Find vulnerabilities by discovery method
     */
    List<VulnerabilityReport> findByDiscoveryMethodOrderByCreatedAtDesc(String discoveryMethod);

    /**
     * Find vulnerabilities by scan tool
     */
    List<VulnerabilityReport> findByScanToolOrderByCreatedAtDesc(String scanTool);

    /**
     * Find vulnerabilities assigned to user
     */
    List<VulnerabilityReport> findByAssignedToOrderByCreatedAtDesc(UUID assignedTo);

    /**
     * Find vulnerabilities assigned to team
     */
    List<VulnerabilityReport> findByAssignedTeamOrderByCreatedAtDesc(String assignedTeam);

    /**
     * Find vulnerabilities by CVSS score range
     */
    @Query("SELECT v FROM VulnerabilityReport v WHERE v.cvssScore BETWEEN :minScore AND :maxScore ORDER BY v.cvssScore DESC")
    List<VulnerabilityReport> findByCvssScoreRange(@Param("minScore") Double minScore,
                                                   @Param("maxScore") Double maxScore);

    /**
     * Find vulnerabilities by CWE ID
     */
    List<VulnerabilityReport> findByCweIdOrderByCreatedAtDesc(String cweId);

    /**
     * Find false positives
     */
    List<VulnerabilityReport> findByFalsePositiveTrueOrderByCreatedAtDesc();

    /**
     * Find vulnerabilities by date range
     */
    @Query("SELECT v FROM VulnerabilityReport v WHERE v.createdAt BETWEEN :startDate AND :endDate ORDER BY v.createdAt DESC")
    List<VulnerabilityReport> findByDateRange(@Param("startDate") LocalDateTime startDate,
                                              @Param("endDate") LocalDateTime endDate);

    /**
     * Find vulnerabilities by scan date range
     */
    @Query("SELECT v FROM VulnerabilityReport v WHERE v.scanDate BETWEEN :startDate AND :endDate ORDER BY v.scanDate DESC")
    List<VulnerabilityReport> findByScanDateRange(@Param("startDate") LocalDateTime startDate,
                                                  @Param("endDate") LocalDateTime endDate);

    /**
     * Find overdue vulnerabilities
     */
    @Query("SELECT v FROM VulnerabilityReport v WHERE v.estimatedFixDate < :currentDate AND v.status IN ('OPEN', 'IN_PROGRESS') ORDER BY v.estimatedFixDate ASC")
    List<VulnerabilityReport> findOverdueVulnerabilities(@Param("currentDate") LocalDateTime currentDate);

    /**
     * Find vulnerabilities due soon
     */
    @Query("SELECT v FROM VulnerabilityReport v WHERE v.estimatedFixDate BETWEEN :currentDate AND :dueDate AND v.status IN ('OPEN', 'IN_PROGRESS') ORDER BY v.estimatedFixDate ASC")
    List<VulnerabilityReport> findVulnerabilitiesDueSoon(@Param("currentDate") LocalDateTime currentDate,
                                                         @Param("dueDate") LocalDateTime dueDate);

    /**
     * Find recently fixed vulnerabilities
     */
    @Query("SELECT v FROM VulnerabilityReport v WHERE v.status = 'FIXED' AND v.actualFixDate >= :since ORDER BY v.actualFixDate DESC")
    List<VulnerabilityReport> findRecentlyFixed(@Param("since") LocalDateTime since);

    /**
     * Find vulnerabilities by exploitability
     */
    List<VulnerabilityReport> findByExploitabilityOrderByCreatedAtDesc(String exploitability);

    /**
     * Find duplicates of a vulnerability
     */
    List<VulnerabilityReport> findByDuplicateOfOrderByCreatedAtDesc(UUID duplicateOf);

    /**
     * Count vulnerabilities by severity in date range
     */
    @Query("SELECT COUNT(v) FROM VulnerabilityReport v WHERE v.severity = :severity AND v.createdAt BETWEEN :startDate AND :endDate")
    Long countBySeverityAndDateRange(@Param("severity") String severity,
                                     @Param("startDate") LocalDateTime startDate,
                                     @Param("endDate") LocalDateTime endDate);

    /**
     * Count vulnerabilities by status in date range
     */
    @Query("SELECT COUNT(v) FROM VulnerabilityReport v WHERE v.status = :status AND v.createdAt BETWEEN :startDate AND :endDate")
    Long countByStatusAndDateRange(@Param("status") String status,
                                   @Param("startDate") LocalDateTime startDate,
                                   @Param("endDate") LocalDateTime endDate);

    /**
     * Find vulnerabilities by multiple criteria
     */
    @Query("SELECT v FROM VulnerabilityReport v WHERE " +
           "(:severity IS NULL OR v.severity = :severity) AND " +
           "(:status IS NULL OR v.status = :status) AND " +
           "(:priority IS NULL OR v.priority = :priority) AND " +
           "(:assignedTo IS NULL OR v.assignedTo = :assignedTo) AND " +
           "(:component IS NULL OR v.affectedComponent LIKE %:component%) AND " +
           "(:startDate IS NULL OR v.createdAt >= :startDate) AND " +
           "(:endDate IS NULL OR v.createdAt <= :endDate) " +
           "ORDER BY v.createdAt DESC")
    Page<VulnerabilityReport> findByCriteria(@Param("severity") String severity,
                                             @Param("status") String status,
                                             @Param("priority") String priority,
                                             @Param("assignedTo") UUID assignedTo,
                                             @Param("component") String component,
                                             @Param("startDate") LocalDateTime startDate,
                                             @Param("endDate") LocalDateTime endDate,
                                             Pageable pageable);

    /**
     * Get vulnerability statistics by severity
     */
    @Query("SELECT v.severity, COUNT(v) FROM VulnerabilityReport v WHERE v.createdAt BETWEEN :startDate AND :endDate GROUP BY v.severity")
    List<Object[]> getSeverityStatistics(@Param("startDate") LocalDateTime startDate,
                                         @Param("endDate") LocalDateTime endDate);

    /**
     * Get vulnerability statistics by status
     */
    @Query("SELECT v.status, COUNT(v) FROM VulnerabilityReport v WHERE v.createdAt BETWEEN :startDate AND :endDate GROUP BY v.status")
    List<Object[]> getStatusStatistics(@Param("startDate") LocalDateTime startDate,
                                       @Param("endDate") LocalDateTime endDate);

    /**
     * Get average fix time by severity
     */
    @Query("SELECT v.severity, AVG(EXTRACT(EPOCH FROM (v.actualFixDate - v.createdAt))/86400) FROM VulnerabilityReport v WHERE v.actualFixDate IS NOT NULL GROUP BY v.severity")
    List<Object[]> getAverageFixTimeBySeverity();

    /**
     * Get vulnerability trends
     */
    @Query("SELECT DATE(v.createdAt), COUNT(v) FROM VulnerabilityReport v WHERE v.createdAt BETWEEN :startDate AND :endDate GROUP BY DATE(v.createdAt) ORDER BY DATE(v.createdAt)")
    List<Object[]> getVulnerabilityTrends(@Param("startDate") LocalDateTime startDate,
                                          @Param("endDate") LocalDateTime endDate);
}
