package ph.gov.dsr.security.entity;

/**
 * Enumeration for vulnerability types
 * 
 * @author DSR Development Team
 * @version 3.0.0
 * @since 2024-12-28
 */
public enum VulnerabilityType {
    
    /**
     * Web application vulnerabilities
     */
    WEB_APPLICATION("Web Application", "Vulnerabilities found in web applications", "OWASP Top 10"),
    
    /**
     * Network infrastructure vulnerabilities
     */
    NETWORK("Network", "Network infrastructure vulnerabilities", "Network Security"),
    
    /**
     * Code quality and security issues
     */
    CODE_QUALITY("Code Quality", "Code quality and security issues", "Static Analysis"),
    
    /**
     * SQL Injection vulnerabilities
     */
    SQL_INJECTION("SQL Injection", "SQL injection attack vulnerabilities", "CWE-89"),
    
    /**
     * Cross-Site Scripting vulnerabilities
     */
    XSS("Cross-Site Scripting", "XSS attack vulnerabilities", "CWE-79"),
    
    /**
     * Cross-Site Request Forgery vulnerabilities
     */
    CSRF("Cross-Site Request Forgery", "CSRF attack vulnerabilities", "CWE-352"),
    
    /**
     * Authentication and authorization issues
     */
    AUTHENTICATION("Authentication", "Authentication and authorization vulnerabilities", "CWE-287"),
    
    /**
     * Session management vulnerabilities
     */
    SESSION_MANAGEMENT("Session Management", "Session handling vulnerabilities", "CWE-384"),
    
    /**
     * Input validation vulnerabilities
     */
    INPUT_VALIDATION("Input Validation", "Input validation vulnerabilities", "CWE-20"),
    
    /**
     * Cryptographic vulnerabilities
     */
    CRYPTOGRAPHIC("Cryptographic", "Cryptographic implementation vulnerabilities", "CWE-327"),
    
    /**
     * Configuration vulnerabilities
     */
    CONFIGURATION("Configuration", "Security configuration vulnerabilities", "Security Misconfiguration"),
    
    /**
     * Information disclosure vulnerabilities
     */
    INFORMATION_DISCLOSURE("Information Disclosure", "Information leakage vulnerabilities", "CWE-200"),
    
    /**
     * Denial of Service vulnerabilities
     */
    DENIAL_OF_SERVICE("Denial of Service", "DoS attack vulnerabilities", "CWE-400"),
    
    /**
     * Buffer overflow vulnerabilities
     */
    BUFFER_OVERFLOW("Buffer Overflow", "Buffer overflow vulnerabilities", "CWE-120"),
    
    /**
     * Path traversal vulnerabilities
     */
    PATH_TRAVERSAL("Path Traversal", "Directory traversal vulnerabilities", "CWE-22"),
    
    /**
     * Remote code execution vulnerabilities
     */
    REMOTE_CODE_EXECUTION("Remote Code Execution", "RCE vulnerabilities", "CWE-94"),
    
    /**
     * Privilege escalation vulnerabilities
     */
    PRIVILEGE_ESCALATION("Privilege Escalation", "Privilege escalation vulnerabilities", "CWE-269"),
    
    /**
     * Business logic vulnerabilities
     */
    BUSINESS_LOGIC("Business Logic", "Business logic flaws", "Business Logic"),
    
    /**
     * API security vulnerabilities
     */
    API_SECURITY("API Security", "API security vulnerabilities", "OWASP API Top 10"),
    
    /**
     * Mobile application vulnerabilities
     */
    MOBILE("Mobile", "Mobile application vulnerabilities", "OWASP Mobile Top 10"),
    
    /**
     * Cloud security vulnerabilities
     */
    CLOUD("Cloud", "Cloud infrastructure vulnerabilities", "Cloud Security"),
    
    /**
     * Container security vulnerabilities
     */
    CONTAINER("Container", "Container security vulnerabilities", "Container Security"),
    
    /**
     * Third-party component vulnerabilities
     */
    THIRD_PARTY("Third Party", "Third-party component vulnerabilities", "Supply Chain"),
    
    /**
     * Compliance violations
     */
    COMPLIANCE("Compliance", "Compliance framework violations", "Compliance"),
    
    /**
     * Other/Unknown vulnerability types
     */
    OTHER("Other", "Other or unknown vulnerability types", "Miscellaneous");
    
    private final String displayName;
    private final String description;
    private final String category;
    
    VulnerabilityType(String displayName, String description, String category) {
        this.displayName = displayName;
        this.description = description;
        this.category = category;
    }
    
    public String getDisplayName() {
        return displayName;
    }
    
    public String getDescription() {
        return description;
    }
    
    public String getCategory() {
        return category;
    }
    
    /**
     * Get vulnerability type from string value (case insensitive)
     */
    public static VulnerabilityType fromString(String value) {
        if (value == null || value.trim().isEmpty()) {
            return OTHER;
        }
        
        try {
            return valueOf(value.toUpperCase());
        } catch (IllegalArgumentException e) {
            return OTHER; // Default to other if invalid value
        }
    }
    
    /**
     * Check if this vulnerability type is web-related
     */
    public boolean isWebRelated() {
        return this == WEB_APPLICATION || this == SQL_INJECTION || this == XSS || 
               this == CSRF || this == API_SECURITY;
    }
    
    /**
     * Check if this vulnerability type is network-related
     */
    public boolean isNetworkRelated() {
        return this == NETWORK || this == DENIAL_OF_SERVICE;
    }
    
    /**
     * Check if this vulnerability type is code-related
     */
    public boolean isCodeRelated() {
        return this == CODE_QUALITY || this == BUFFER_OVERFLOW || 
               this == REMOTE_CODE_EXECUTION || this == INPUT_VALIDATION;
    }
    
    /**
     * Check if this vulnerability type requires immediate attention
     */
    public boolean requiresImmediateAttention() {
        return this == SQL_INJECTION || this == REMOTE_CODE_EXECUTION || 
               this == PRIVILEGE_ESCALATION || this == AUTHENTICATION;
    }
    
    /**
     * Get default severity for this vulnerability type
     */
    public VulnerabilitySeverity getDefaultSeverity() {
        switch (this) {
            case SQL_INJECTION:
            case REMOTE_CODE_EXECUTION:
            case PRIVILEGE_ESCALATION:
                return VulnerabilitySeverity.HIGH;
            case XSS:
            case CSRF:
            case AUTHENTICATION:
                return VulnerabilitySeverity.MEDIUM;
            case INFORMATION_DISCLOSURE:
            case CONFIGURATION:
                return VulnerabilitySeverity.LOW;
            default:
                return VulnerabilitySeverity.MEDIUM;
        }
    }
}
