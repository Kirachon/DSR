'use client';

// Report Viewer Component
// Modal for viewing generated reports

import React from 'react';

import { Modal, Button } from '@/components/ui';
import type { Report } from '@/types';

// Report viewer props interface
interface ReportViewerProps {
  isOpen: boolean;
  report: Report | null;
  onClose: () => void;
}

// Report Viewer component
export const ReportViewer: React.FC<ReportViewerProps> = ({
  isOpen,
  report,
  onClose,
}) => {
  if (!report) {
    return null;
  }

  return (
    <Modal 
      isOpen={isOpen} 
      onClose={onClose} 
      title={`Report: ${report.name}`}
      size="4xl"
    >
      <div className="space-y-6">
        {/* Report Information */}
        <div className="bg-gray-50 p-4 rounded-lg">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <h4 className="text-sm font-medium text-gray-700">Report Name</h4>
              <p className="text-sm text-gray-900">{report.name}</p>
            </div>
            <div>
              <h4 className="text-sm font-medium text-gray-700">Category</h4>
              <p className="text-sm text-gray-900">{report.category}</p>
            </div>
            <div>
              <h4 className="text-sm font-medium text-gray-700">Generated By</h4>
              <p className="text-sm text-gray-900">{report.generatedBy}</p>
            </div>
            <div>
              <h4 className="text-sm font-medium text-gray-700">Generated Date</h4>
              <p className="text-sm text-gray-900">
                {report.generatedDate 
                  ? new Date(report.generatedDate).toLocaleString()
                  : 'N/A'
                }
              </p>
            </div>
          </div>
          {report.description && (
            <div className="mt-4">
              <h4 className="text-sm font-medium text-gray-700">Description</h4>
              <p className="text-sm text-gray-900">{report.description}</p>
            </div>
          )}
        </div>

        {/* Report Parameters */}
        {report.parameters && Object.keys(report.parameters).length > 0 && (
          <div>
            <h4 className="text-md font-medium text-gray-900 mb-3">Report Parameters</h4>
            <div className="bg-gray-50 p-4 rounded-lg">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                {Object.entries(report.parameters).map(([key, value]) => (
                  <div key={key}>
                    <span className="text-sm font-medium text-gray-700 capitalize">
                      {key.replace(/([A-Z])/g, ' $1').trim()}:
                    </span>
                    <span className="ml-2 text-sm text-gray-900">
                      {typeof value === 'object' ? JSON.stringify(value) : String(value)}
                    </span>
                  </div>
                ))}
              </div>
            </div>
          </div>
        )}

        {/* Report Preview */}
        <div>
          <h4 className="text-md font-medium text-gray-900 mb-3">Report Preview</h4>
          {report.fileUrl ? (
            <div className="border border-gray-200 rounded-lg p-4">
              <div className="text-center">
                <div className="text-gray-500 mb-4">
                  <svg className="mx-auto h-12 w-12" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                  </svg>
                </div>
                <p className="text-sm text-gray-600 mb-4">
                  Report file is ready for download
                </p>
                <Button
                  onClick={() => window.open(report.fileUrl!, '_blank')}
                  className="mb-2"
                >
                  Download Report
                </Button>
                <p className="text-xs text-gray-500">
                  File: {report.fileUrl.split('/').pop()}
                </p>
              </div>
            </div>
          ) : (
            <div className="border border-gray-200 rounded-lg p-8 text-center">
              <div className="text-gray-500 mb-4">
                <svg className="mx-auto h-12 w-12" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
              </div>
              <p className="text-sm text-gray-600">
                Report file is not available for preview
              </p>
            </div>
          )}
        </div>

        {/* Actions */}
        <div className="flex justify-end space-x-3 pt-6 border-t border-gray-200">
          <Button variant="outline" onClick={onClose}>
            Close
          </Button>
          {report.fileUrl && (
            <Button onClick={() => window.open(report.fileUrl!, '_blank')}>
              Download Report
            </Button>
          )}
        </div>
      </div>
    </Modal>
  );
};
