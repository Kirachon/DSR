'use client';

// Report List Component
// Displays a list of generated reports with actions

import React from 'react';

import { Button, Badge, Loading } from '@/components/ui';
import type { Report } from '@/types';

// Report list props interface
interface ReportListProps {
  reports: Report[];
  loading: boolean;
  onReportView: (report: Report) => void;
  onReportDownload: (report: Report) => void;
  onRefresh: () => void;
}

// Status badge variant mapping
const getStatusVariant = (status: string) => {
  switch (status) {
    case 'COMPLETED':
      return 'success';
    case 'GENERATING':
      return 'warning';
    case 'PENDING':
      return 'secondary';
    case 'FAILED':
      return 'error';
    default:
      return 'secondary';
  }
};

// Category badge variant mapping
const getCategoryVariant = (category: string) => {
  switch (category) {
    case 'REGISTRATION':
      return 'primary';
    case 'PAYMENT':
      return 'success';
    case 'ELIGIBILITY':
      return 'warning';
    case 'GRIEVANCE':
      return 'error';
    case 'ANALYTICS':
      return 'info';
    case 'SYSTEM':
      return 'secondary';
    default:
      return 'secondary';
  }
};

// Report List component
export const ReportList: React.FC<ReportListProps> = ({
  reports,
  loading,
  onReportView,
  onReportDownload,
  onRefresh,
}) => {
  if (loading) {
    return (
      <div className="flex items-center justify-center py-8">
        <Loading text="Loading reports..." />
      </div>
    );
  }

  if (reports.length === 0) {
    return (
      <div className="text-center py-8">
        <div className="text-gray-500 mb-4">
          <svg className="mx-auto h-12 w-12" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
          </svg>
        </div>
        <h3 className="text-lg font-medium text-gray-900 mb-2">No reports found</h3>
        <p className="text-gray-600 mb-4">
          No reports match your current search criteria.
        </p>
        <Button onClick={onRefresh}>Refresh List</Button>
      </div>
    );
  }

  return (
    <div className="space-y-4">
      {/* Reports Table */}
      <div className="overflow-x-auto">
        <table className="min-w-full divide-y divide-gray-200">
          <thead className="bg-gray-50">
            <tr>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Report
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Category
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Status
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Generated By
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Generated Date
              </th>
              <th className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                Actions
              </th>
            </tr>
          </thead>
          <tbody className="bg-white divide-y divide-gray-200">
            {reports.map((report) => (
              <tr key={report.id} className="hover:bg-gray-50">
                <td className="px-6 py-4">
                  <div>
                    <div className="text-sm font-medium text-gray-900">
                      {report.name}
                    </div>
                    <div className="text-sm text-gray-500">
                      {report.description}
                    </div>
                  </div>
                </td>
                <td className="px-6 py-4 whitespace-nowrap">
                  <Badge variant={getCategoryVariant(report.category)}>
                    {report.category}
                  </Badge>
                </td>
                <td className="px-6 py-4 whitespace-nowrap">
                  <div className="flex items-center">
                    <Badge variant={getStatusVariant(report.status)}>
                      {report.status}
                    </Badge>
                    {report.status === 'GENERATING' && (
                      <div className="ml-2">
                        <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-primary-600"></div>
                      </div>
                    )}
                  </div>
                </td>
                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                  {report.generatedBy}
                </td>
                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                  {report.generatedDate 
                    ? new Date(report.generatedDate).toLocaleDateString()
                    : 'N/A'
                  }
                </td>
                <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                  <div className="flex justify-end space-x-2">
                    {report.status === 'COMPLETED' && report.fileUrl && (
                      <>
                        <Button
                          size="sm"
                          variant="outline"
                          onClick={() => onReportView(report)}
                        >
                          View
                        </Button>
                        <Button
                          size="sm"
                          onClick={() => onReportDownload(report)}
                        >
                          Download
                        </Button>
                      </>
                    )}
                    {report.status === 'GENERATING' && (
                      <span className="text-sm text-gray-500">Generating...</span>
                    )}
                    {report.status === 'FAILED' && (
                      <span className="text-sm text-red-500">Failed</span>
                    )}
                  </div>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>

      {/* Pagination */}
      <div className="flex items-center justify-between">
        <div className="text-sm text-gray-700">
          Showing {reports.length} reports
        </div>
        <div className="flex space-x-2">
          <Button variant="outline" size="sm" disabled>
            Previous
          </Button>
          <Button variant="outline" size="sm" disabled>
            Next
          </Button>
        </div>
      </div>
    </div>
  );
};
