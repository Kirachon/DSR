apply plugin: "com.android.application"
apply plugin: "com.facebook.react"
apply plugin: "com.google.gms.google-services"

/**
 * This is the configuration block to customize your React Native Android app.
 */
react {
    /* Folders */
    root = file("../")
    reactNativeDir = file("../../node_modules/react-native")
    codegenDir = file("../../node_modules/@react-native/codegen")
    cliFile = file("../../node_modules/@react-native/cli/build/bin.js")

    /* Variants */
    debuggableVariants = ["liveDebug", "stagingDebug"]

    /* Bundling */
    bundleCommand = "ram-bundle"
    bundleConfig = file(../../bundle.config.js)
    bundleAssetName = "index.android.bundle"
    entryFile = file("../../index.js")
    extraPackagerArgs = []

    /* Hermes Commands */
    hermesCommand = "../../node_modules/react-native/sdks/hermesvm/osx-bin/hermesc"
    debuggableVariants = ["liveDebug", "stagingDebug"]

    /* Autolinking */
    autolinkLibrariesWithApp()
}

/**
 * Set this to true to create four separate APKs instead of one,
 * one for each native architecture. This is useful if you don't
 * use App Bundles (https://developer.android.com/guide/app-bundle/)
 * and want to have separate APKs to upload to the Play Store.
 */
def enableSeparateBuildPerCPUArchitecture = false

/**
 * Set this to true to Run Proguard on Release builds to minify the Java bytecode.
 */
def enableProguardInReleaseBuilds = true

/**
 * The preferred build flavor of JavaScriptCore (JSC)
 */
def jscFlavor = 'org.webkit:android-jsc:+'

android {
    ndkVersion rootProject.ext.ndkVersion
    compileSdkVersion rootProject.ext.compileSdkVersion

    namespace "ph.gov.dsr.mobile"
    defaultConfig {
        applicationId "ph.gov.dsr.mobile"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0.0"
        multiDexEnabled true
        
        // Proguard optimization
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        
        // Network security config
        networkSecurityConfig file("src/main/res/xml/network_security_config.xml")
        
        // Build config fields
        buildConfigField "String", "API_BASE_URL", "\"https://api.dsr.gov.ph/v1\""
        buildConfigField "boolean", "ENABLE_CRASHLYTICS", "true"
        buildConfigField "boolean", "ENABLE_ANALYTICS", "true"
        
        // Manifest placeholders
        manifestPlaceholders = [
            appName: "@string/app_name",
            appIcon: "@mipmap/ic_launcher"
        ]
        
        // Vector drawables support
        vectorDrawables.useSupportLibrary = true
        
        // Resconfigs for smaller APK
        resConfigs "en", "fil", "ceb", "ilo", "hil", "war", "bik", "pam", "pan", "mag"
        
        // ABI filters for smaller APK
        ndk {
            abiFilters "armeabi-v7a", "arm64-v8a", "x86", "x86_64"
        }
    }

    signingConfigs {
        debug {
            storeFile file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
        release {
            if (project.hasProperty('MYAPP_UPLOAD_STORE_FILE')) {
                storeFile file(MYAPP_UPLOAD_STORE_FILE)
                storePassword MYAPP_UPLOAD_STORE_PASSWORD
                keyAlias MYAPP_UPLOAD_KEY_ALIAS
                keyPassword MYAPP_UPLOAD_KEY_PASSWORD
            }
        }
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.debug
            applicationIdSuffix ".debug"
            debuggable true
            minifyEnabled false
            shrinkResources false
            buildConfigField "String", "API_BASE_URL", "\"http://10.0.2.2:8080/api/v1\""
            buildConfigField "boolean", "ENABLE_CRASHLYTICS", "false"
            buildConfigField "boolean", "ENABLE_ANALYTICS", "false"
        }
        release {
            signingConfig signingConfigs.release
            minifyEnabled enableProguardInReleaseBuilds
            shrinkResources enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro"
            debuggable false
            zipAlignEnabled true
            crunchPngs true
            
            // Bundle optimization
            bundle {
                language {
                    enableSplit = true
                }
                density {
                    enableSplit = true
                }
                abi {
                    enableSplit = true
                }
            }
        }
    }

    // Split APKs by ABI and screen density
    splits {
        abi {
            reset()
            enable enableSeparateBuildPerCPUArchitecture
            universalApk false
            include "armeabi-v7a", "arm64-v8a", "x86", "x86_64"
        }
        density {
            enable false
            reset()
            include "mdpi", "hdpi", "xhdpi", "xxhdpi", "xxxhdpi"
        }
    }

    // Packaging options
    packagingOptions {
        pickFirst "lib/x86/libc++_shared.so"
        pickFirst "lib/x86_64/libc++_shared.so"
        pickFirst "lib/arm64-v8a/libc++_shared.so"
        pickFirst "lib/armeabi-v7a/libc++_shared.so"
        
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/ASL2.0'
        exclude 'META-INF/*.kotlin_module'
    }

    // Compile options
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }

    // Lint options
    lintOptions {
        disable 'MissingTranslation'
        checkReleaseBuilds false
        abortOnError false
    }

    // Bundle tool configuration
    bundle {
        language {
            enableSplit = true
        }
        density {
            enableSplit = true
        }
        abi {
            enableSplit = true
        }
    }
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation "com.facebook.react:react-android"
    implementation "com.facebook.react:flipper-integration"
    
    // Hermes
    if (hermesEnabled.toBoolean()) {
        implementation("com.facebook.react:hermes-android")
    } else {
        implementation jscFlavor
    }
    
    // Firebase
    implementation platform('com.google.firebase:firebase-bom:32.7.0')
    implementation 'com.google.firebase:firebase-analytics'
    implementation 'com.google.firebase:firebase-messaging'
    implementation 'com.google.firebase:firebase-crashlytics'
    implementation 'com.google.firebase:firebase-performance'
    
    // Security
    implementation 'androidx.security:security-crypto:1.1.0-alpha06'
    implementation 'net.zetetic:android-database-sqlcipher:4.5.4'
    
    // Biometrics
    implementation 'androidx.biometric:biometric:1.1.0'
    
    // Network security
    implementation 'com.squareup.okhttp3:okhttp:4.12.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:4.12.0'
    
    // Performance
    implementation 'androidx.multidex:multidex:2.0.1'
    
    // Testing
    debugImplementation("com.facebook.flipper:flipper:${FLIPPER_VERSION}")
    debugImplementation("com.facebook.flipper:flipper-network-plugin:${FLIPPER_VERSION}") {
        exclude group:'com.squareup.okhttp3', module:'okhttp'
    }
    debugImplementation("com.facebook.flipper:flipper-fresco-plugin:${FLIPPER_VERSION}")
    
    if (hermesEnabled.toBoolean()) {
        debugImplementation("com.facebook.flipper:flipper-hermes-executor:${FLIPPER_VERSION}")
    } else {
        debugImplementation("com.facebook.flipper:flipper-rhino-executor:${FLIPPER_VERSION}")
    }
}

// Apply Google services plugin
apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.crashlytics'
apply plugin: 'com.google.firebase.firebase-perf'

// Version code generation for multiple APKs
android.applicationVariants.all { variant ->
    variant.outputs.each { output ->
        def versionCodes = ["armeabi-v7a": 1, "arm64-v8a": 2, "x86": 3, "x86_64": 4]
        def abi = output.getFilter(OutputFile.ABI)
        if (abi != null) {
            output.versionCodeOverride = defaultConfig.versionCode * 1000 + versionCodes.get(abi)
        }
    }
}
