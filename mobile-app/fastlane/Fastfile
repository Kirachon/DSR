# DSR Mobile App Fastlane Configuration
# Automated deployment for iOS and Android

default_platform(:ios)

# Global variables
APP_IDENTIFIER = "ph.gov.dsr.mobile"
WORKSPACE = "ios/DSRMobileApp.xcworkspace"
SCHEME = "DSRMobileApp"

platform :ios do
  desc "Runs all the tests"
  lane :test do
    run_tests(
      workspace: WORKSPACE,
      scheme: SCHEME,
      device: "iPhone 14",
      clean: true
    )
  end

  desc "Build for development"
  lane :build_dev do
    match(type: "development")
    gym(
      workspace: WORKSPACE,
      scheme: SCHEME,
      configuration: "Debug",
      export_method: "development",
      output_directory: "./build",
      output_name: "DSRMobile-Dev.ipa"
    )
  end

  desc "Build for App Store"
  lane :build_release do
    match(type: "appstore")
    gym(
      workspace: WORKSPACE,
      scheme: SCHEME,
      configuration: "Release",
      export_method: "app-store",
      export_options: "ios/ExportOptions.plist",
      output_directory: "./build",
      output_name: "DSRMobile-Release.ipa"
    )
  end

  desc "Deploy to TestFlight"
  lane :beta do
    # Ensure we have the latest provisioning profiles
    match(type: "appstore")
    
    # Increment build number
    increment_build_number(xcodeproj: "ios/DSRMobileApp.xcodeproj")
    
    # Build the app
    gym(
      workspace: WORKSPACE,
      scheme: SCHEME,
      configuration: "Release",
      export_method: "app-store",
      export_options: "ios/ExportOptions.plist"
    )
    
    # Upload to TestFlight
    upload_to_testflight(
      skip_waiting_for_build_processing: false,
      changelog: "Bug fixes and performance improvements",
      groups: ["Internal Testing", "External Testing"],
      notify_external_testers: true
    )
    
    # Send notification
    slack(
      message: "DSR Mobile iOS app successfully uploaded to TestFlight! ðŸš€",
      channel: "#mobile-releases",
      success: true
    )
  end

  desc "Deploy to App Store"
  lane :release do
    # Ensure we have the latest provisioning profiles
    match(type: "appstore")
    
    # Build the app
    gym(
      workspace: WORKSPACE,
      scheme: SCHEME,
      configuration: "Release",
      export_method: "app-store",
      export_options: "ios/ExportOptions.plist"
    )
    
    # Upload to App Store Connect
    upload_to_app_store(
      force: true,
      reject_if_possible: true,
      skip_metadata: false,
      skip_screenshots: false,
      submit_for_review: false,
      automatic_release: false,
      phased_release: true
    )
    
    # Send notification
    slack(
      message: "DSR Mobile iOS app successfully uploaded to App Store! ðŸŽ‰",
      channel: "#mobile-releases",
      success: true
    )
  end

  desc "Take screenshots"
  lane :screenshots do
    capture_screenshots(
      workspace: WORKSPACE,
      scheme: SCHEME,
      devices: [
        "iPhone 14 Pro Max",
        "iPhone 14",
        "iPhone SE (3rd generation)",
        "iPad Pro (12.9-inch) (6th generation)"
      ]
    )
    
    frame_screenshots(
      white: true,
      path: "./fastlane/screenshots"
    )
  end

  error do |lane, exception|
    slack(
      message: "iOS deployment failed: #{exception.message}",
      channel: "#mobile-releases",
      success: false
    )
  end
end

platform :android do
  desc "Runs all the tests"
  lane :test do
    gradle(task: "test")
  end

  desc "Build debug APK"
  lane :build_debug do
    gradle(
      task: "assembleDebug",
      project_dir: "android/"
    )
  end

  desc "Build release APK"
  lane :build_release do
    gradle(
      task: "assembleRelease",
      project_dir: "android/"
    )
  end

  desc "Build release AAB"
  lane :build_bundle do
    gradle(
      task: "bundleRelease",
      project_dir: "android/"
    )
  end

  desc "Deploy to internal testing"
  lane :internal do
    # Build the AAB
    gradle(
      task: "bundleRelease",
      project_dir: "android/"
    )
    
    # Upload to Play Console internal testing
    upload_to_play_store(
      track: "internal",
      aab: "android/app/build/outputs/bundle/release/app-release.aab",
      skip_upload_metadata: true,
      skip_upload_images: true,
      skip_upload_screenshots: true
    )
    
    # Send notification
    slack(
      message: "DSR Mobile Android app successfully uploaded to internal testing! ðŸš€",
      channel: "#mobile-releases",
      success: true
    )
  end

  desc "Deploy to production"
  lane :production do
    # Build the AAB
    gradle(
      task: "bundleRelease",
      project_dir: "android/"
    )
    
    # Upload to Play Store
    upload_to_play_store(
      track: "production",
      aab: "android/app/build/outputs/bundle/release/app-release.aab",
      skip_upload_metadata: false,
      skip_upload_images: false,
      skip_upload_screenshots: false,
      release_status: "draft"
    )
    
    # Send notification
    slack(
      message: "DSR Mobile Android app successfully uploaded to Play Store! ðŸŽ‰",
      channel: "#mobile-releases",
      success: true
    )
  end

  desc "Take screenshots"
  lane :screenshots do
    gradle(task: "assembleDebug assembleAndroidTest")
    
    capture_android_screenshots(
      locales: ["en-US", "fil-PH"],
      clear_previous_screenshots: true,
      app_apk_path: "android/app/build/outputs/apk/debug/app-debug.apk",
      tests_apk_path: "android/app/build/outputs/apk/androidTest/debug/app-debug-androidTest.apk"
    )
  end

  error do |lane, exception|
    slack(
      message: "Android deployment failed: #{exception.message}",
      channel: "#mobile-releases",
      success: false
    )
  end
end

# Cross-platform lanes
desc "Run security audit"
lane :security_audit do
  # Run npm audit
  sh("cd .. && npm audit --audit-level moderate")
  
  # Run additional security checks
  sh("cd .. && npx audit-ci --config audit-ci.json")
  
  # Check for hardcoded secrets
  sh("cd .. && npx secretlint '**/*'")
end

desc "Run performance tests"
lane :performance_test do
  # Bundle size analysis
  sh("cd .. && npx react-native-bundle-visualizer")
  
  # Performance profiling
  sh("cd .. && npx @react-native-community/cli bundle --platform android --dev false --entry-file index.js --bundle-output /tmp/bundle.js --sourcemap-output /tmp/bundle.map")
end

desc "Prepare release"
lane :prepare_release do
  # Run linting
  sh("cd .. && npm run lint")
  
  # Run type checking
  sh("cd .. && npm run type-check")
  
  # Run tests
  sh("cd .. && npm run test:ci")
  
  # Run security audit
  security_audit
  
  # Run performance tests
  performance_test
end
