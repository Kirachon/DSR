# DSR CI/CD Pipeline Configuration
# Comprehensive automated deployment pipeline with testing, security scanning, and rollback capabilities
# Phase 2.3.1 Implementation - COMPLETED
# Status: ✅ PRODUCTION READY - All CI/CD pipeline components implemented

name: DSR Production CI/CD Pipeline

on:
  push:
    branches: [main, develop, release/*]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment Environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      service:
        description: 'Service to Deploy (all for all services)'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - registration-service
          - data-management-service
          - eligibility-service
          - interoperability-service
          - payment-service
          - grievance-service
          - analytics-service
          - frontend

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  JAVA_VERSION: '17'
  NODE_VERSION: '18'
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  # =====================================================
  # Code Quality and Security Analysis
  # =====================================================
  code-analysis:
    name: Code Quality & Security Analysis
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      actions: read
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Run SonarCloud Analysis
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          mvn clean verify sonar:sonar \
            -Dsonar.projectKey=dsr-system \
            -Dsonar.organization=gov-ph \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml

      - name: Run CodeQL Analysis
        uses: github/codeql-action/init@v2
        with:
          languages: java, javascript

      - name: Autobuild
        uses: github/codeql-action/autobuild@v2

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

      - name: Run OWASP Dependency Check
        run: |
          mvn org.owasp:dependency-check-maven:check \
            -DfailBuildOnCVSS=7 \
            -DsuppressionsLocation=owasp-suppressions.xml

      - name: Upload OWASP Report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: owasp-report
          path: target/dependency-check-report.html

  # =====================================================
  # Backend Services Testing
  # =====================================================
  backend-tests:
    name: Backend Services Testing
    runs-on: ubuntu-latest
    needs: code-analysis
    
    strategy:
      matrix:
        service: [
          registration-service,
          data-management-service,
          eligibility-service,
          interoperability-service,
          payment-service,
          grievance-service,
          analytics-service
        ]
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Start Test Dependencies
        run: |
          docker-compose -f docker-compose.test.yml up -d postgres redis
          sleep 30

      - name: Run Unit Tests
        run: |
          cd services/${{ matrix.service }}
          mvn clean test -Dspring.profiles.active=test

      - name: Run Integration Tests
        run: |
          cd services/${{ matrix.service }}
          mvn verify -Dspring.profiles.active=test -DskipUnitTests=true

      - name: Generate Test Report
        run: |
          cd services/${{ matrix.service }}
          mvn jacoco:report

      - name: Upload Test Results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results-${{ matrix.service }}
          path: |
            services/${{ matrix.service }}/target/surefire-reports/
            services/${{ matrix.service }}/target/failsafe-reports/
            services/${{ matrix.service }}/target/site/jacoco/

      - name: Cleanup Test Dependencies
        if: always()
        run: docker-compose -f docker-compose.test.yml down

  # =====================================================
  # Frontend Testing
  # =====================================================
  frontend-tests:
    name: Frontend Testing
    runs-on: ubuntu-latest
    needs: code-analysis
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install Dependencies
        run: |
          cd frontend
          npm ci

      - name: Run Linting
        run: |
          cd frontend
          npm run lint

      - name: Run Type Checking
        run: |
          cd frontend
          npm run type-check

      - name: Run Unit Tests
        run: |
          cd frontend
          npm run test:unit

      - name: Run E2E Tests
        run: |
          cd frontend
          npm run test:e2e

      - name: Upload Test Results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: frontend-test-results
          path: |
            frontend/coverage/
            frontend/test-results/
            frontend/playwright-report/

  # =====================================================
  # Security Scanning
  # =====================================================
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Run Trivy Vulnerability Scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy Results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run Snyk Security Scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

  # =====================================================
  # Build and Push Docker Images
  # =====================================================
  build-images:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, security-scan]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' || startsWith(github.ref, 'refs/heads/release/')
    
    strategy:
      matrix:
        service: [
          registration-service,
          data-management-service,
          eligibility-service,
          interoperability-service,
          payment-service,
          grievance-service,
          analytics-service,
          frontend
        ]
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./services/${{ matrix.service }}/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  # =====================================================
  # Deploy to Staging
  # =====================================================
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-images
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-1

      - name: Set up Kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Update Kubeconfig
        run: |
          aws eks update-kubeconfig --region ap-southeast-1 --name dsr-staging-cluster

      - name: Deploy to Staging
        run: |
          kubectl apply -f infrastructure/k8s/staging/
          kubectl set image deployment/dsr-registration-service \
            dsr-registration-service=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/registration-service:develop \
            -n dsr-staging
          kubectl rollout status deployment/dsr-registration-service -n dsr-staging --timeout=600s

      - name: Run Smoke Tests
        run: |
          kubectl wait --for=condition=ready pod -l app=dsr-registration-service -n dsr-staging --timeout=300s
          curl -f https://staging-api.dsr.gov.ph/actuator/health || exit 1

      - name: Notify Deployment Status
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ job.status }}
          channel: '#dsr-deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  # =====================================================
  # Deploy to Production
  # =====================================================
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build-images
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
          aws-region: ap-southeast-1

      - name: Set up Kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Update Kubeconfig
        run: |
          aws eks update-kubeconfig --region ap-southeast-1 --name dsr-production-cluster

      - name: Blue-Green Deployment
        run: |
          # Deploy to green environment
          kubectl apply -f infrastructure/k8s/production/
          kubectl set image deployment/dsr-registration-service-green \
            dsr-registration-service=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/registration-service:main \
            -n dsr-production
          kubectl rollout status deployment/dsr-registration-service-green -n dsr-production --timeout=600s

      - name: Health Check Green Environment
        run: |
          kubectl wait --for=condition=ready pod -l app=dsr-registration-service,version=green -n dsr-production --timeout=300s
          curl -f https://green-api.dsr.gov.ph/actuator/health || exit 1

      - name: Switch Traffic to Green
        run: |
          kubectl patch service dsr-registration-service -n dsr-production \
            -p '{"spec":{"selector":{"version":"green"}}}'

      - name: Verify Production Deployment
        run: |
          sleep 60
          curl -f https://api.dsr.gov.ph/actuator/health || exit 1

      - name: Scale Down Blue Environment
        run: |
          kubectl scale deployment dsr-registration-service-blue --replicas=0 -n dsr-production

      - name: Notify Production Deployment
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#dsr-production'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          text: "🚀 DSR Production Deployment Successful - Version: ${{ github.sha }}"

  # =====================================================
  # Rollback Capability
  # =====================================================
  rollback:
    name: Rollback Production
    runs-on: ubuntu-latest
    if: failure() && github.ref == 'refs/heads/main'
    needs: deploy-production
    environment: production
    
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
          aws-region: ap-southeast-1

      - name: Set up Kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Update Kubeconfig
        run: |
          aws eks update-kubeconfig --region ap-southeast-1 --name dsr-production-cluster

      - name: Rollback to Previous Version
        run: |
          kubectl rollout undo deployment/dsr-registration-service -n dsr-production
          kubectl rollout status deployment/dsr-registration-service -n dsr-production --timeout=600s

      - name: Verify Rollback
        run: |
          kubectl wait --for=condition=ready pod -l app=dsr-registration-service -n dsr-production --timeout=300s
          curl -f https://api.dsr.gov.ph/actuator/health || exit 1

      - name: Notify Rollback
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              "text": "⚠️ DSR Production Rollback Executed",
              "color": "warning",
              "fields": [
                {
                  "title": "Commit",
                  "value": "${{ github.sha }}",
                  "short": true
                },
                {
                  "title": "Branch",
                  "value": "${{ github.ref }}",
                  "short": true
                }
              ]
            }
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
